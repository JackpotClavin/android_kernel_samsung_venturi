--- drivers/mmc/host/sdhci.c
+++ drivers/mmc/host/sdhci.c
@@ -1488,22 +1487,11 @@
 		return;
 	}
 
-	if (intmask & SDHCI_INT_TIMEOUT) {
-		if (host->mmc->card)
-			printk(KERN_ERR "%s: cmd %d command timeout error\n",
-					mmc_hostname(host->mmc), host->cmd->opcode);
-
+	if (intmask & SDHCI_INT_TIMEOUT)
 		host->cmd->error = -ETIMEDOUT;
-	}
 	else if (intmask & (SDHCI_INT_CRC | SDHCI_INT_END_BIT |
-			SDHCI_INT_INDEX)) {
-		printk(KERN_ERR "%s: cmd %d %s error\n",
-                        mmc_hostname(host->mmc),host->cmd->opcode,
-			(intmask & SDHCI_INT_CRC) ? "command crc" :
-			(intmask & SDHCI_INT_END_BIT) ? "command end bit" :
-			"command index error");
+			SDHCI_INT_INDEX))
 		host->cmd->error = -EILSEQ;
-	}
 
 	if (host->cmd->error) {
 		tasklet_schedule(&host->finish_tasklet);
@@ -1591,17 +1579,11 @@
 		return;
 	}
 
-	if (intmask & SDHCI_INT_DATA_TIMEOUT) {
-		printk(KERN_ERR "%s: cmd %d data timeout error\n",
-                        mmc_hostname(host->mmc),host->mrq->cmd->opcode);
+	if (intmask & SDHCI_INT_DATA_TIMEOUT)
 		host->data->error = -ETIMEDOUT;
-	} else if (intmask & (SDHCI_INT_DATA_CRC | SDHCI_INT_DATA_END_BIT)) {
-		printk(KERN_ERR "%s: cmd %d %s error\n",
-                        mmc_hostname(host->mmc),host->mrq->cmd->opcode,
-			(intmask & SDHCI_INT_DATA_CRC) ? "data crc" :
-			"command end bit");
+	else if (intmask & (SDHCI_INT_DATA_CRC | SDHCI_INT_DATA_END_BIT))
 		host->data->error = -EILSEQ;
-	} else if (intmask & SDHCI_INT_ADMA_ERROR) {
+	else if (intmask & SDHCI_INT_ADMA_ERROR) {
 		printk(KERN_ERR "%s: ADMA error\n", mmc_hostname(host->mmc));
 		sdhci_show_adma_error(host);
 		host->data->error = -EIO;
@@ -1751,12 +1730,6 @@
 	int ret = 0;
 	struct mmc_host *mmc = host->mmc;
 
-	if (host->vmmc) {
-		int ret = regulator_enable(host->vmmc);
-		if (ret)
-			return ret;
-	}
-
 	if (host->flags & (SDHCI_USE_SDMA | SDHCI_USE_ADMA)) {
 		if (host->ops->enable_dma)
 			host->ops->enable_dma(host);
@@ -2033,14 +2006,6 @@
 	if (ret)
 		goto untasklet;
 
-	host->vmmc = regulator_get(mmc_dev(mmc), "vtf");
-	if (IS_ERR(host->vmmc)) {
-		printk(KERN_INFO "%s: no vmmc regulator found\n", mmc_hostname(mmc));
-		host->vmmc = NULL;
-	} else {
-		regulator_enable(host->vmmc);
-	}
-
 	sdhci_init(host, 0);
 
 #ifdef CONFIG_MMC_DEBUG
